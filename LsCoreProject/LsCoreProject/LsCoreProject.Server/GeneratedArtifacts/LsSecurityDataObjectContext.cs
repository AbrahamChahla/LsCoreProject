//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("LightSwitchApplication", "RolePermission_Permission", "Permission", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LightSwitchApplication.Implementation.Permission), "RolePermissions", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LightSwitchApplication.Implementation.RolePermission), true)]
[assembly: EdmRelationshipAttribute("LightSwitchApplication", "RoleAssignment_Role", "Role", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LightSwitchApplication.Implementation.Role), "RoleAssignments", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LightSwitchApplication.Implementation.RoleAssignment), true)]
[assembly: EdmRelationshipAttribute("LightSwitchApplication", "RolePermission_Role", "Role", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LightSwitchApplication.Implementation.Role), "RolePermissions", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LightSwitchApplication.Implementation.RolePermission), true)]
[assembly: EdmRelationshipAttribute("LightSwitchApplication", "RoleAssignment_User", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LightSwitchApplication.Implementation.UserRegistration), "RoleAssignments", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LightSwitchApplication.Implementation.RoleAssignment), true)]
[assembly: EdmRelationshipAttribute("LightSwitchApplication", "RoleAssignment_SourceAccount", "SourceAccount", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LightSwitchApplication.Implementation.UserRegistration), "DerivingRoleAssignments", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LightSwitchApplication.Implementation.RoleAssignment), true)]

#endregion

namespace LightSwitchApplication.Implementation
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class LsSecurityData : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new LsSecurityData object using the connection string found in the 'LsSecurityData' section of the application configuration file.
        /// </summary>
        public LsSecurityData() : base("name=LsSecurityData", "LsSecurityData")
        {
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new LsSecurityData object.
        /// </summary>
        public LsSecurityData(string connectionString) : base(connectionString, "LsSecurityData")
        {
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new LsSecurityData object.
        /// </summary>
        public LsSecurityData(EntityConnection connection) : base(connection, "LsSecurityData")
        {
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Permission> Permissions
        {
            get
            {
                if ((_Permissions == null))
                {
                    _Permissions = base.CreateObjectSet<Permission>("Permissions");
                }
                return _Permissions;
            }
        }
        private ObjectSet<Permission> _Permissions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RoleAssignment> RoleAssignments
        {
            get
            {
                if ((_RoleAssignments == null))
                {
                    _RoleAssignments = base.CreateObjectSet<RoleAssignment>("RoleAssignments");
                }
                return _RoleAssignments;
            }
        }
        private ObjectSet<RoleAssignment> _RoleAssignments;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RolePermission> RolePermissions1
        {
            get
            {
                if ((_RolePermissions1 == null))
                {
                    _RolePermissions1 = base.CreateObjectSet<RolePermission>("RolePermissions1");
                }
                return _RolePermissions1;
            }
        }
        private ObjectSet<RolePermission> _RolePermissions1;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Role> Roles
        {
            get
            {
                if ((_Roles == null))
                {
                    _Roles = base.CreateObjectSet<Role>("Roles");
                }
                return _Roles;
            }
        }
        private ObjectSet<Role> _Roles;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UserRegistration> UserRegistrations
        {
            get
            {
                if ((_UserRegistrations == null))
                {
                    _UserRegistrations = base.CreateObjectSet<UserRegistration>("UserRegistrations");
                }
                return _UserRegistrations;
            }
        }
        private ObjectSet<UserRegistration> _UserRegistrations;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Permissions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPermissions(Permission permission)
        {
            base.AddObject("Permissions", permission);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RoleAssignments EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRoleAssignments(RoleAssignment roleAssignment)
        {
            base.AddObject("RoleAssignments", roleAssignment);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RolePermissions1 EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRolePermissions1(RolePermission rolePermission)
        {
            base.AddObject("RolePermissions1", rolePermission);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Roles EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRoles(Role role)
        {
            base.AddObject("Roles", role);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the UserRegistrations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUserRegistrations(UserRegistration userRegistration)
        {
            base.AddObject("UserRegistrations", userRegistration);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LightSwitchApplication", Name="Permission")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Permission : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Permission object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Permission CreatePermission(global::System.String id, global::System.String name)
        {
            Permission permission = new Permission();
            permission.Id = id;
            permission.Name = name;
            return permission;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = value;
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.String _Id;
        partial void OnIdChanging(global::System.String value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = value;
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "RolePermission_Permission", "RolePermissions")]
        public EntityCollection<RolePermission> RolePermissions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RolePermission>("LightSwitchApplication.RolePermission_Permission", "RolePermissions");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RolePermission>("LightSwitchApplication.RolePermission_Permission", "RolePermissions", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LightSwitchApplication", Name="Role")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Role : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Role object.
        /// </summary>
        /// <param name="name">Initial value of the Name property.</param>
        public static Role CreateRole(global::System.String name)
        {
            Role role = new Role();
            role.Name = name;
            return role;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (_Name != value)
                {
                    OnNameChanging(value);
                    ReportPropertyChanging("Name");
                    _Name = value;
                    ReportPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "RoleAssignment_Role", "RoleAssignments")]
        public EntityCollection<RoleAssignment> RoleAssignments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RoleAssignment>("LightSwitchApplication.RoleAssignment_Role", "RoleAssignments");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RoleAssignment>("LightSwitchApplication.RoleAssignment_Role", "RoleAssignments", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "RolePermission_Role", "RolePermissions")]
        public EntityCollection<RolePermission> RolePermissions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RolePermission>("LightSwitchApplication.RolePermission_Role", "RolePermissions");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RolePermission>("LightSwitchApplication.RolePermission_Role", "RolePermissions", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LightSwitchApplication", Name="RoleAssignment")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RoleAssignment : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RoleAssignment object.
        /// </summary>
        /// <param name="userName">Initial value of the UserName property.</param>
        /// <param name="roleName">Initial value of the RoleName property.</param>
        /// <param name="sourceAccountName">Initial value of the SourceAccountName property.</param>
        public static RoleAssignment CreateRoleAssignment(global::System.String userName, global::System.String roleName, global::System.String sourceAccountName)
        {
            RoleAssignment roleAssignment = new RoleAssignment();
            roleAssignment.UserName = userName;
            roleAssignment.RoleName = roleName;
            roleAssignment.SourceAccountName = sourceAccountName;
            return roleAssignment;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String UserName
        {
            get
            {
                return _UserName;
            }
            set
            {
                if (_UserName != value)
                {
                    OnUserNameChanging(value);
                    ReportPropertyChanging("UserName");
                    _UserName = value;
                    ReportPropertyChanged("UserName");
                    OnUserNameChanged();
                }
            }
        }
        private global::System.String _UserName;
        partial void OnUserNameChanging(global::System.String value);
        partial void OnUserNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String RoleName
        {
            get
            {
                return _RoleName;
            }
            set
            {
                if (_RoleName != value)
                {
                    OnRoleNameChanging(value);
                    ReportPropertyChanging("RoleName");
                    _RoleName = value;
                    ReportPropertyChanged("RoleName");
                    OnRoleNameChanged();
                }
            }
        }
        private global::System.String _RoleName;
        partial void OnRoleNameChanging(global::System.String value);
        partial void OnRoleNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SourceAccountName
        {
            get
            {
                return _SourceAccountName;
            }
            set
            {
                if (_SourceAccountName != value)
                {
                    OnSourceAccountNameChanging(value);
                    ReportPropertyChanging("SourceAccountName");
                    _SourceAccountName = value;
                    ReportPropertyChanged("SourceAccountName");
                    OnSourceAccountNameChanged();
                }
            }
        }
        private global::System.String _SourceAccountName;
        partial void OnSourceAccountNameChanging(global::System.String value);
        partial void OnSourceAccountNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "RoleAssignment_User", "User")]
        public UserRegistration User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserRegistration>("LightSwitchApplication.RoleAssignment_User", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserRegistration>("LightSwitchApplication.RoleAssignment_User", "User").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<UserRegistration> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserRegistration>("LightSwitchApplication.RoleAssignment_User", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<UserRegistration>("LightSwitchApplication.RoleAssignment_User", "User", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "RoleAssignment_SourceAccount", "SourceAccount")]
        public UserRegistration SourceAccount
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserRegistration>("LightSwitchApplication.RoleAssignment_SourceAccount", "SourceAccount").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserRegistration>("LightSwitchApplication.RoleAssignment_SourceAccount", "SourceAccount").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<UserRegistration> SourceAccountReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserRegistration>("LightSwitchApplication.RoleAssignment_SourceAccount", "SourceAccount");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<UserRegistration>("LightSwitchApplication.RoleAssignment_SourceAccount", "SourceAccount", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "RoleAssignment_Role", "Role")]
        public Role Role
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Role>("LightSwitchApplication.RoleAssignment_Role", "Role").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Role>("LightSwitchApplication.RoleAssignment_Role", "Role").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Role> RoleReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Role>("LightSwitchApplication.RoleAssignment_Role", "Role");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Role>("LightSwitchApplication.RoleAssignment_Role", "Role", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LightSwitchApplication", Name="RolePermission")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RolePermission : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RolePermission object.
        /// </summary>
        /// <param name="roleName">Initial value of the RoleName property.</param>
        /// <param name="permissionId">Initial value of the PermissionId property.</param>
        public static RolePermission CreateRolePermission(global::System.String roleName, global::System.String permissionId)
        {
            RolePermission rolePermission = new RolePermission();
            rolePermission.RoleName = roleName;
            rolePermission.PermissionId = permissionId;
            return rolePermission;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String RoleName
        {
            get
            {
                return _RoleName;
            }
            set
            {
                if (_RoleName != value)
                {
                    OnRoleNameChanging(value);
                    ReportPropertyChanging("RoleName");
                    _RoleName = value;
                    ReportPropertyChanged("RoleName");
                    OnRoleNameChanged();
                }
            }
        }
        private global::System.String _RoleName;
        partial void OnRoleNameChanging(global::System.String value);
        partial void OnRoleNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String PermissionId
        {
            get
            {
                return _PermissionId;
            }
            set
            {
                if (_PermissionId != value)
                {
                    OnPermissionIdChanging(value);
                    ReportPropertyChanging("PermissionId");
                    _PermissionId = value;
                    ReportPropertyChanged("PermissionId");
                    OnPermissionIdChanged();
                }
            }
        }
        private global::System.String _PermissionId;
        partial void OnPermissionIdChanging(global::System.String value);
        partial void OnPermissionIdChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "RolePermission_Role", "Role")]
        public Role Role
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Role>("LightSwitchApplication.RolePermission_Role", "Role").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Role>("LightSwitchApplication.RolePermission_Role", "Role").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Role> RoleReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Role>("LightSwitchApplication.RolePermission_Role", "Role");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Role>("LightSwitchApplication.RolePermission_Role", "Role", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "RolePermission_Permission", "Permission")]
        public Permission Permission
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Permission>("LightSwitchApplication.RolePermission_Permission", "Permission").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Permission>("LightSwitchApplication.RolePermission_Permission", "Permission").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Permission> PermissionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Permission>("LightSwitchApplication.RolePermission_Permission", "Permission");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Permission>("LightSwitchApplication.RolePermission_Permission", "Permission", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LightSwitchApplication", Name="UserRegistration")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class UserRegistration : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new UserRegistration object.
        /// </summary>
        /// <param name="userName">Initial value of the UserName property.</param>
        /// <param name="fullName">Initial value of the FullName property.</param>
        public static UserRegistration CreateUserRegistration(global::System.String userName, global::System.String fullName)
        {
            UserRegistration userRegistration = new UserRegistration();
            userRegistration.UserName = userName;
            userRegistration.FullName = fullName;
            return userRegistration;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String UserName
        {
            get
            {
                return _UserName;
            }
            set
            {
                if (_UserName != value)
                {
                    OnUserNameChanging(value);
                    ReportPropertyChanging("UserName");
                    _UserName = value;
                    ReportPropertyChanged("UserName");
                    OnUserNameChanged();
                }
            }
        }
        private global::System.String _UserName;
        partial void OnUserNameChanging(global::System.String value);
        partial void OnUserNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FullName
        {
            get
            {
                return _FullName;
            }
            set
            {
                OnFullNameChanging(value);
                ReportPropertyChanging("FullName");
                _FullName = value;
                ReportPropertyChanged("FullName");
                OnFullNameChanged();
            }
        }
        private global::System.String _FullName;
        partial void OnFullNameChanging(global::System.String value);
        partial void OnFullNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Password
        {
            get
            {
                return _Password;
            }
            set
            {
                OnPasswordChanging(value);
                ReportPropertyChanging("Password");
                _Password = value;
                ReportPropertyChanged("Password");
                OnPasswordChanged();
            }
        }
        private global::System.String _Password;
        partial void OnPasswordChanging(global::System.String value);
        partial void OnPasswordChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "RoleAssignment_User", "RoleAssignments")]
        public EntityCollection<RoleAssignment> RoleAssignments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RoleAssignment>("LightSwitchApplication.RoleAssignment_User", "RoleAssignments");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RoleAssignment>("LightSwitchApplication.RoleAssignment_User", "RoleAssignments", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "RoleAssignment_SourceAccount", "DerivingRoleAssignments")]
        public EntityCollection<RoleAssignment> DerivingRoleAssignments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RoleAssignment>("LightSwitchApplication.RoleAssignment_SourceAccount", "DerivingRoleAssignments");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RoleAssignment>("LightSwitchApplication.RoleAssignment_SourceAccount", "DerivingRoleAssignments", value);
                }
            }
        }

        #endregion

    }

    #endregion

    
}
